package rest;


import exceptions.ScannerException;
import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;
import pojos.ScanResponse;
import service.Scanner;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.io.InputStream;
import java.time.LocalDateTime;


@Path("malwarescan")
public class ScannerResource {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public String pingServer() throws ScannerException {
        return Scanner.getServiceStatus();
    }

    @POST
    @Path("scan")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.APPLICATION_JSON)
    public Response scanObject(@FormDataParam("file") InputStream inputStream,
                               @FormDataParam("file") FormDataContentDisposition fileDetail) throws ScannerException {
        String scanResult = Scanner.scanObject(inputStream);
        if (isClean(scanResult)) {
            return Response
                    .ok(new ScanResponse(LocalDateTime.now(), fileDetail.getFileName(), isClean(scanResult), scanResult))
                    .build();
        } else {
            throw new ScannerException(scanResult, 406);
        }
    }

    /**
     * Check if the result String contains clean info or not.
     *
     * @param scanResult String
     * @return boolean
     */
    private boolean isClean(String scanResult) {
        return scanResult.contains("OK")
                && !scanResult.contains("FOUND");
    }
}
