package service;


import exceptions.ScannerException;
import org.apache.commons.io.IOUtils;

import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

/**
 * Scanner service utility that connects to the clamd antivirus service running in the background.
 *
 * @author roshan
 */
public final class Scanner {

    /**
     * Set host name, port and time out period.
     */
    private static final String HOST_NAME = "0.0.0.0";
    private static final int PORT = 3310;
    private static final int TIME_OUT = 300000;

    /**
     * Set the chunk size and reply length within the range, specified in clamd.conf
     */
    private static final int BUFFER_SIZE = 5000;
    private static final int PONG_REPLY_LEN = 4;

    private Scanner() {
    }


    /**
     * Ping the Server.
     *
     * @return String
     * @throws ScannerException
     */
    public static String getServiceStatus() throws ScannerException {
        try (Socket socket = new Socket(HOST_NAME, PORT);
             OutputStream outputStream = socket.getOutputStream()) {
            socket.setSoTimeout(TIME_OUT);
            outputStream.write("zPING\0".getBytes(StandardCharsets.US_ASCII));
            outputStream.flush();
            byte[] b = new byte[PONG_REPLY_LEN];
            InputStream inputStream = socket.getInputStream();
            int copyIndex = 0;
            int readResult;
            do {
                readResult = inputStream.read(b, copyIndex, Math.max(b.length - copyIndex, 0));
                copyIndex += readResult;
            } while (readResult > 0);
            return Arrays.equals(b, "PONG".getBytes(StandardCharsets.US_ASCII))
                    ? " UP AND RUNNING....."
                    : " SOMETHING'S WRONG";
        } catch (IOException e) {
            throw new ScannerException(e.getLocalizedMessage(), 500);
        }
    }


    /**
     * Scan the given {@link InputStream} and return the result.
     *
     * @param sourceStream {@link InputStream}
     * @return String
     * @throws ScannerException
     */
    public static String scanObject(InputStream sourceStream) throws ScannerException {
        try (Socket socket = new Socket(HOST_NAME, PORT);
             OutputStream outputStream = new BufferedOutputStream(socket.getOutputStream())) {

            /* Initial handshake */
            socket.setSoTimeout(TIME_OUT);
            outputStream.write("zINSTREAM\0".getBytes(StandardCharsets.US_ASCII));
            outputStream.flush();

            byte[] buffer = new byte[BUFFER_SIZE];

            try (InputStream clamStream = socket.getInputStream()) {
                /* Send data */
                int read = sourceStream.read(buffer);
                while (read >= 0) {
                    byte[] chunkSize = ByteBuffer.allocate(4).putInt(read).array();
                    outputStream.write(chunkSize);
                    outputStream.write(buffer, 0, read);
                    if (clamStream.available() > 0) {
                        byte[] reply = IOUtils.toByteArray(clamStream);
                        throw new ScannerException(IOUtils.toString(reply, Charset.defaultCharset().name()), 500);
                    }
                    read = sourceStream.read(buffer);
                }

                /* Terminate */
                outputStream.write(new byte[]{0, 0, 0, 0});
                outputStream.flush();

                /* Return result */
                return IOUtils.toString(clamStream, Charset.defaultCharset());
            }
        } catch (IOException e) {
            throw new ScannerException(e.getMessage(), 500);
        }
    }
}
